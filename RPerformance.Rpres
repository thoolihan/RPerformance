R Performance (it's not R, it's you)
========================================================
author: Tim Hoolihan
date: Presented January 2018 at Codemash
autosize: true

Bio
========================================================

![Bio Pic](images/family.jpg)

- Tim Hoolihan
- Just like Lebron, I live in West Akron and work in Cleveland
- Senior Director of Data Science at DialogTech
- Organizer of the Cleveland R User Group: [meetup.com/Cleveland-UseR-Group](https://www.meetup.com/Cleveland-UseR-Group/)
- Created a series of R machine learning videos: [packtpub.com/all?search=Hoolihan](https://www.packtpub.com/all?search=Hoolihan)

========================================================

<img src="images/dt-logo.png" style="background-color:transparent; border:0px; box-shadow:none;"></img>

## "DialogTech provides actionable marketing analytics for businesses that value inbound phone calls." - dialogtech.com

* Offices in Chicago, IL and Cleveland, OH
* We are hiring a Deep Learning Expert
* [dialogtech.com/careers](https://www.dialogtech.com/careers)

Thank You
========================================================
### Thanks to all Codemash & Kalahari staff and volunteers! This is my favorite tech event of the year.

Purpose
========================================================
R is often unfairly maligned for being slow, and not being able to deal with big data. Let's talk about:

* Tools for measuring performance
* Common performance issues
* Dealing with Large Data Sets
* How this works in an example

Time a process
========================================================
```{r}
start <- Sys.time()
Sys.sleep(0.5)
end <- Sys.time()
end - start
```

```{r}
system.time({system("du -shc ~/workspace")})
```

What is user time? system time?
========================================================
> “User CPU time” gives the CPU time spent by the current process (i.e., the current R session) and “system CPU time” gives the CPU time spent by the kernel (the operating system) on behalf of the current process. The operating system is used for things like opening files, doing input or output, starting other processes, and looking at the system clock: operations that involve resources that many processes must share. Different operating systems will have different things done by the operating system.
> > \- William Dunlap on R-Help Mailing List


Using rbenchmark package
========================================================
[RBenchmark Package](https://cran.r-project.org/web/packages/rbenchmark/index.html)
```{r}
library(rbenchmark)

1:25
benchmark((1:25)^2, replications = 500)
```

Benchmarking
========================================================

## Demo here

Other benchmarking alternatives
========================================================
* tictoc package
* microbenchmark

Memory profiling
========================================================
More info [here](http://adv-r.had.co.nz/memory.html)
```{r}
library(pryr)
```

## Single variable
```{r}
a = 1
object_size(a)
```
## List
```{r}
b = 1:1000
object_size(b)
```

Memory profiling (cont)
========================================================
## All Objects
```{r}
ls()
object_size(ls())
```

Memory Management
========================================================

## Demo

A common performance problem
========================================================
> "If you wrote a for loop in R, you're most likely doing it wrong"
> > \- Me

Vectors
========================================================

Q\: What is a vector in R?

A\: Everything

```{r}
i <- 9
print(paste('class:', class(i),
            'i[0]:', i[0],
            'i[1]:', i[1],
            'i[2]:', i[2]))
```

Q\: What?

Vectorize operations
========================================================
In other words, use R functions that operate on an entire vector of values, as opposed to looping through values and applying your function. Even if the underlying C code is using a for loop, trust that it is optimized to minimize the number of allocation steps.

> Vectorising is about taking a “whole object” approach to a problem, thinking about vectors, not scalars.
> > \- Hadley Wickham in [*Advanced R*](http://adv-r.had.co.nz/)

Well summarized in this [blog post by Noam Ross: http://bit.ly/RpBOYe](http://bit.ly/RpBOYe)

Vectorize for SIMD?
========================================================
Users who know something about low-level instructions often assume that R is faster with vectors because it can use multiple data instruction sets when available on the CPU. 

This is kinda, sorta, not really the case. Because of memory allocation and other optimizations, it is faster to use vectorized code in R even with the default reference BLAS which does not use these enhancements. 

Some implementations of R link to math libraries (BLAS implementations) that make use of various optimizations. For example, Revolution R comes with the [Intel MKL (Math Kernel Library)](https://software.intel.com/en-us/mkl) for performance reasons.

For more info, see this [StackOverflow discussion: http://bit.ly/2qKSU9r](http://bit.ly/2qKSU9r)

Vectorize operations
========================================================

## Demo

I want to implement function in C/C++ too
========================================================
Since the solution seems to involve using R functions that are implemented in C/C++...

I want to implement functions in C/C++ too
========================================================
> "Are you down with [RCPP](https://cran.r-project.org/web/packages/Rcpp/index.html)?""
> > -Naughty By Nature

![OPP](images/opp.jpg)

RCPP
========================================================

## Demo

RCPP
========================================================
As cool as it is to have a second programming language stored in a string in your primary language (cough... SQL...), there must be a better way!?

## Demo

Audience participation
========================================================
Who would like to implement Newton's method in C++ live?

data.table
========================================================
[CRAN package page](https://cran.r-project.org/web/packages/data.table/index.html)

Description: "Fast aggregation of large data (e.g. 100GB in RAM), fast ordered joins, fast add/modify/delete of columns by group using no copies at all, list columns, a fast friendly file reader and parallel file writer. Offers a natural and flexible syntax, for faster development."

data.table
========================================================

## Demo

Chunk From Disk
========================================================
* [ff](https://cran.r-project.org/web/packages/ff/index.html)
* [ffbase](https://cran.r-project.org/web/packages/ffbase/index.html)

Chunking with ff, ffbase
========================================================

## Demo

I have cores...
========================================================
parallel
Part of base R as of 2.14

Description: "Support for parallel computation, including by forking
   (taken from package multicore), by sockets (taken from package snow)
   and random-number generation."
   
Parallel
========================================================

## Demo

My GPU can run VR...
========================================================
* [tensorflow R package](https://cran.r-project.org/web/packages/tensorflow/index.html) 
  * [Talk by Bryan Lewis at CRUG](https://www.youtube.com/watch?v=iHH9zpHXqOA)
* [keras R package](https://cran.r-project.org/web/packages/keras/index.html)
  * [Talk by Tim Hoolihan at CRUG](https://www.youtube.com/watch?v=iHH9zpHXqOA)
* Why not just use Python?

My data has it's own zip code...
========================================================
> Big Data comes into play when the CPU time for the calculation takes longer than the cognitive process of designing a model.
> > (Paraphrased) Hadley Wickham

* [Spark](https://spark.apache.org/)
  * [Sparklyr](https://cran.rstudio.com/web/packages/sparklyr/index.html)
* [Hadoop](http://hadoop.apache.org/)
  * [r2mr](https://github.com/RevolutionAnalytics/rmr2)
  * [RHipe](https://github.com/delta-rho/RHIPE)
* [h20](https://cran.r-project.org/web/packages/h2o/index.html)

Put it all together
========================================================
Maybe?

Asking for help
========================================================
* [stackoverflow.com/questions/tagged/r](https://stackoverflow.com/questions/tagged/r)
* [community.rstudio.com](https://community.rstudio.com/)
* [How to Write a Reproducable Example - by Hadley Wickham](http://bit.ly/2FkmXIh)
  * [http://bit.ly/2FkmXIh](http://bit.ly/2FkmXIh)

Cleveland R User Group
========================================================
Join us! We meet monthly in Cleveland

- Cleveland R User Group: [meetup.com/Cleveland-UseR-Group/](https://www.meetup.com/Cleveland-UseR-Group/)
- Cleveland R User Group Talks: [youtube.com/channel/UC7C4YZ-9itQW7Nl4RVKDflg](https://www.youtube.com/channel/UC7C4YZ-9itQW7Nl4RVKDflg)

Questions? / Contact / Stalk Me
========================================================
- Twitter: [@thoolihan](https://twitter.com/thoolihan)
- Slides: [github.com/thoolihan/RPerformance](https://github.com/thoolihan/RPerformance)
- Homepage: [hoolihan.net](http://hoolihan.net)
- Blog: [hoolihan.net/blog-tim](http://hoolihan.net/blog-tim)
- Videos: [youtube.com/c/TimHoolihan](https://www.youtube.com/c/TimHoolihan)
- ML Videos: [packtpub.com/all?search=Hoolihan](https://www.packtpub.com/all?search=Hoolihan)
- Cleveland R User Group: [meetup.com/Cleveland-UseR-Group/](https://www.meetup.com/Cleveland-UseR-Group/)
- Cleveland R User Group Talks: [youtube.com/channel/UC7C4YZ-9itQW7Nl4RVKDflg](https://www.youtube.com/channel/UC7C4YZ-9itQW7Nl4RVKDflg)

# Thank you for coming today, make the most of Your Codemash
